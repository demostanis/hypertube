services:
  crocotube:
    build:
      context: .
      dockerfile: app/Dockerfile
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      MOVIE_DB_API: ${MOVIE_DB_API}
    develop:
      watch:
        - action: rebuild
          path: app
          target: /app/

  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    env_file: .env
    environment:
      TMDB_API_KEY: ${TMDB_API_KEY}
    volumes:
      - jackett_data:/app/jackett/
      - worker_logs:/var/log/worker
    develop:
      watch:
        - action: rebuild
          path: worker
          target: /app/
    depends_on:
      jackett:
        condition: service_healthy

  caddy:
    image: caddy:2.9
    depends_on:
      keycloak:
        condition: service_healthy
    ports:
      - "8000:80"
      - "8443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_logs:/var/log/caddy

  postgres:
    build: db
    env_file: .env
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db/init.sh:/docker-entrypoint-initdb.d/init.sh
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: ${ROOT_DB_PASSWORD}
    healthcheck:
      test: pg_isready --dbname=crocotube
    command: -c config_file=/usr/share/postgresql/postgresql.conf.sample

  keycloak:
    build: keycloak
    env_file: .env
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}

      # TODO: what about HTTPS?
      KC_HTTP_PORT: 8000
      KC_HOSTNAME: http://keycloak.localhost:8000
      KC_HOSTNAME_BACKCHANNEL_DYNAMIC: true
      KC_HTTP_ENABLED: true

      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}

      # only used in entrypoint.sh
      KC_FORWARD_AUTH_SECRET: ${KEYCLOAK_FORWARD_AUTH_SECRET} 
      KC_ADMIN_EMAIL: ${KEYCLOAK_ADMIN_EMAIL}
    command: start
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: test -f /opt/keycloak/ready
    networks:
      default:
        aliases:
          - keycloak.localhost # for oauth2-proxy

  forward-auth:
    env_file: .env
    depends_on:
      keycloak:
        condition: service_healthy
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.7.1
    command: |
      --provider=keycloak-oidc
      --client-id=forward-auth
      --client-secret=$KEYCLOAK_FORWARD_AUTH_SECRET
      --whitelist-domain=*.localhost:*
      --oidc-issuer-url=http://keycloak.localhost:8000/realms/master
      --email-domain=* --code-challenge-method=S256
      --cookie-secure=false
      --cookie-secret=$FORWARD_AUTH_COOKIE_SECRET
      --http-address=0.0.0.0:4180
      --skip-provider-button
      --reverse-proxy=true

  meilisearch:
    image: getmeili/meilisearch
    env_file: .env
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}
    volumes:
      - meili_data:/meili_data
    depends_on:
      postgres:
        condition: service_healthy

  meilisync:
    image: long2ice/meilisync
    volumes:
      - ./db/meilisync_config.yml:/meilisync/config.yml.template
      - ./db/meilisync_entrypoint.sh:/entrypoint.sh
    env_file: .env
    environment:
      MEILISEARCH_DB_PASSWORD: ${MEILISEARCH_DB_PASSWORD}
    depends_on:
      - meilisearch
      - postgres
    entrypoint: /entrypoint.sh

  smtp4dev:
    image: rnwood/smtp4dev

include:
  - ./metrics/docker-compose.yml
  - ./jackett/docker-compose.yml

volumes:
  pg_data:
  meili_data:
